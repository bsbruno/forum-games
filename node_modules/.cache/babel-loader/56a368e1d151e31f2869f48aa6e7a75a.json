{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\jogos\\\\Desktop\\\\api-post\\\\frontend\\\\src\\\\components\\\\Input\\\\index.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useRef, useState } from \"react\";\nimport * as S from \"./styled\";\nimport { useField } from \"@unform/core\";\nimport { useEffect } from \"react\";\nimport { useCallback } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\n// eslint-disable-next-line react/prop-types\nconst Input = ({\n  name,\n  icon: Icon,\n  ...rest\n}) => {\n  _s();\n\n  const [isFocused, setIsFocused] = useState(false);\n  const [isFilled, setIsFilled] = useState(false);\n  const inputRef = useRef(null);\n  const {\n    fieldName,\n    defaultValue,\n    error,\n    registerField\n  } = useField(name);\n  const handleInputBlur = useCallback(() => {\n    var _inputRef$current;\n\n    setIsFocused(false);\n    setIsFilled(!!((_inputRef$current = inputRef.current) === null || _inputRef$current === void 0 ? void 0 : _inputRef$current.value));\n  }, []);\n  const handleIsFocus = useCallback(() => {\n    setIsFocused(true);\n  }, []);\n  useEffect(() => {\n    registerField({\n      name: fieldName,\n      ref: inputRef.current,\n      path: \"value\"\n    });\n  }, [fieldName, registerField]);\n  return /*#__PURE__*/_jsxDEV(S.Wrapper, {\n    isErrored: !!error,\n    isFilled: isFilled,\n    isFocused: isFocused,\n    children: [Icon && /*#__PURE__*/_jsxDEV(Icon, {\n      size: 20\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 16\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      ref: inputRef,\n      defaultValue: defaultValue,\n      ...rest,\n      onFocus: handleIsFocus,\n      onBlur: handleInputBlur\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this), error]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Input, \"SiXkgkH+1sm27pgkrSaKjFB6Wgg=\", false, function () {\n  return [useField];\n});\n\n_c = Input;\nexport default Input;\n\nvar _c;\n\n$RefreshReg$(_c, \"Input\");","map":{"version":3,"sources":["C:/Users/jogos/Desktop/api-post/frontend/src/components/Input/index.tsx"],"names":["React","useRef","useState","S","useField","useEffect","useCallback","Input","name","icon","Icon","rest","isFocused","setIsFocused","isFilled","setIsFilled","inputRef","fieldName","defaultValue","error","registerField","handleInputBlur","current","value","handleIsFocus","ref","path"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,MAAhB,EAAwBC,QAAxB,QAAwC,OAAxC;AAEA,OAAO,KAAKC,CAAZ,MAAmB,UAAnB;AAEA,SAASC,QAAT,QAAyB,cAAzB;AACA,SAASC,SAAT,QAA0B,OAA1B;AACA,SAASC,WAAT,QAA4B,OAA5B;;;AAQA;AACA,MAAMC,KAA2B,GAAG,CAAC;AAAEC,EAAAA,IAAF;AAAQC,EAAAA,IAAI,EAAEC,IAAd;AAAoB,KAAGC;AAAvB,CAAD,KAAmC;AAAA;;AACrE,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BX,QAAQ,CAAC,KAAD,CAA1C;AACA,QAAM,CAACY,QAAD,EAAWC,WAAX,IAA0Bb,QAAQ,CAAC,KAAD,CAAxC;AAEA,QAAMc,QAAQ,GAAGf,MAAM,CAAmB,IAAnB,CAAvB;AAEA,QAAM;AAAEgB,IAAAA,SAAF;AAAaC,IAAAA,YAAb;AAA2BC,IAAAA,KAA3B;AAAkCC,IAAAA;AAAlC,MAAoDhB,QAAQ,CAACI,IAAD,CAAlE;AACA,QAAMa,eAAe,GAAGf,WAAW,CAAC,MAAM;AAAA;;AACxCO,IAAAA,YAAY,CAAC,KAAD,CAAZ;AAEAE,IAAAA,WAAW,CAAC,CAAC,uBAACC,QAAQ,CAACM,OAAV,sDAAC,kBAAkBC,KAAnB,CAAF,CAAX;AACD,GAJkC,EAIhC,EAJgC,CAAnC;AAMA,QAAMC,aAAa,GAAGlB,WAAW,CAAC,MAAM;AACtCO,IAAAA,YAAY,CAAC,IAAD,CAAZ;AACD,GAFgC,EAE9B,EAF8B,CAAjC;AAIAR,EAAAA,SAAS,CAAC,MAAM;AACde,IAAAA,aAAa,CAAC;AACZZ,MAAAA,IAAI,EAAES,SADM;AAEZQ,MAAAA,GAAG,EAAET,QAAQ,CAACM,OAFF;AAGZI,MAAAA,IAAI,EAAE;AAHM,KAAD,CAAb;AAKD,GANQ,EAMN,CAACT,SAAD,EAAYG,aAAZ,CANM,CAAT;AAQA,sBACE,QAAC,CAAD,CAAG,OAAH;AAAW,IAAA,SAAS,EAAE,CAAC,CAACD,KAAxB;AAA+B,IAAA,QAAQ,EAAEL,QAAzC;AAAmD,IAAA,SAAS,EAAEF,SAA9D;AAAA,eACGF,IAAI,iBAAI,QAAC,IAAD;AAAM,MAAA,IAAI,EAAE;AAAZ;AAAA;AAAA;AAAA;AAAA,YADX,eAEE;AACE,MAAA,IAAI,EAAC,MADP;AAEE,MAAA,GAAG,EAAEM,QAFP;AAGE,MAAA,YAAY,EAAEE,YAHhB;AAAA,SAIMP,IAJN;AAKE,MAAA,OAAO,EAAEa,aALX;AAME,MAAA,MAAM,EAAEH;AANV;AAAA;AAAA;AAAA;AAAA,YAFF,EAUGF,KAVH;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAcD,CAvCD;;GAAMZ,K;UAMsDH,Q;;;KANtDG,K;AAyCN,eAAeA,KAAf","sourcesContent":["import React, { useRef, useState } from \"react\";\nimport { InputHTMLAttributes } from \"react\";\nimport * as S from \"./styled\";\nimport { IconBaseProps } from \"react-icons\";\nimport { useField } from \"@unform/core\";\nimport { useEffect } from \"react\";\nimport { useCallback } from \"react\";\ntype InputTypes = InputHTMLAttributes<HTMLInputElement>;\n\ntype InputProps = {\n  name: string;\n  icon?: React.ComponentType<IconBaseProps>;\n} & InputTypes;\n\n// eslint-disable-next-line react/prop-types\nconst Input: React.FC<InputProps> = ({ name, icon: Icon, ...rest }) => {\n  const [isFocused, setIsFocused] = useState(false);\n  const [isFilled, setIsFilled] = useState(false);\n\n  const inputRef = useRef<HTMLInputElement>(null);\n\n  const { fieldName, defaultValue, error, registerField } = useField(name);\n  const handleInputBlur = useCallback(() => {\n    setIsFocused(false);\n\n    setIsFilled(!!inputRef.current?.value);\n  }, []);\n\n  const handleIsFocus = useCallback(() => {\n    setIsFocused(true);\n  }, []);\n\n  useEffect(() => {\n    registerField({\n      name: fieldName,\n      ref: inputRef.current,\n      path: \"value\",\n    });\n  }, [fieldName, registerField]);\n\n  return (\n    <S.Wrapper isErrored={!!error} isFilled={isFilled} isFocused={isFocused}>\n      {Icon && <Icon size={20} />}\n      <input\n        type=\"text\"\n        ref={inputRef}\n        defaultValue={defaultValue}\n        {...rest}\n        onFocus={handleIsFocus}\n        onBlur={handleInputBlur}\n      />\n      {error}\n    </S.Wrapper>\n  );\n};\n\nexport default Input;\n"]},"metadata":{},"sourceType":"module"}