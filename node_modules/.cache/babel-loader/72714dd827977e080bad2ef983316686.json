{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\jogos\\\\Desktop\\\\api-post\\\\frontend\\\\src\\\\hooks\\\\AuthContext.tsx\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React, { createContext } from \"react\";\nimport { useContext } from \"react\";\nimport { useCallback } from \"react\";\nimport { useState } from \"react\";\nimport api from \"../services/api\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext({});\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n\n  const [data, setData] = useState(() => {\n    const token = localStorage.getItem(\"@Posts:token\");\n    const user = localStorage.getItem(\"@Posts:user\");\n\n    if (token && user) {\n      api.defaults.headers.authorization = `Bearer ${token}`;\n      return {\n        token,\n        user: JSON.parse(user)\n      };\n    }\n\n    return {};\n  });\n  const signIn = useCallback(async ({\n    email,\n    password\n  }) => {\n    const response = await api.post(\"sessions\", {\n      email,\n      password\n    });\n    const {\n      token,\n      user\n    } = response.data;\n    localStorage.setItem(\"@Posts:token\", token);\n    localStorage.setItem(\"@Posts:user\", JSON.stringify(user));\n    api.defaults.headers.authorization = `Bearer ${token}`;\n    setData({\n      token,\n      user\n    });\n  }, []);\n  const updateUser = useCallback(user => {\n    localStorage.setItem(\"@Posts:user\", JSON.stringify(user));\n    setData({\n      token: data.token,\n      user\n    });\n  }, [setData]);\n  const signOut = useCallback(() => {\n    localStorage.removeItem(\"@Posts:token\");\n    localStorage.removeItem(\"@Posts:user\");\n    setData({});\n  }, []);\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      user: data.user,\n      signIn,\n      signOut,\n      updateUser\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 75,\n    columnNumber: 5\n  }, this);\n};\n\n_s(AuthProvider, \"E6i3lEazKPAlcYs1yy/7XtkmUl0=\");\n\n_c = AuthProvider;\nexport function useAuth() {\n  _s2();\n\n  const context = useContext(AuthContext);\n  if (!context) throw new Error(\"useAuth must be used within an AuthProvider\");\n  return context;\n}\n\n_s2(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\n\nvar _c;\n\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"sources":["C:/Users/jogos/Desktop/api-post/frontend/src/hooks/AuthContext.tsx"],"names":["React","createContext","useContext","useCallback","useState","api","AuthContext","AuthProvider","children","data","setData","token","localStorage","getItem","user","defaults","headers","authorization","JSON","parse","signIn","email","password","response","post","setItem","stringify","updateUser","signOut","removeItem","useAuth","context","Error"],"mappings":"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","sourcesContent":["import React, { createContext } from \"react\";\nimport { useContext } from \"react\";\nimport { useCallback } from \"react\";\nimport { useState } from \"react\";\nimport api from \"../services/api\";\n\ninterface User {\n  id: string;\n  name: string;\n  email: string;\n  avatar?: string;\n  nickname?: string;\n}\ninterface AuthState {\n  token: string;\n  user: User;\n}\n\ninterface SignInCredentials {\n  email: string;\n  password: string;\n}\n\ninterface AuthContextData {\n  user: User;\n  signOut(): void;\n  signIn(credentials: SignInCredentials): Promise<void>;\n  updateUser(user: User): void;\n}\n\nconst AuthContext = createContext<AuthContextData>({} as AuthContextData);\n\nexport const AuthProvider: React.FC = ({ children }) => {\n  const [data, setData] = useState<AuthState>(() => {\n    const token = localStorage.getItem(\"@Posts:token\");\n    const user = localStorage.getItem(\"@Posts:user\");\n\n    if (token && user) {\n      api.defaults.headers.authorization = `Bearer ${token}`;\n      return { token, user: JSON.parse(user) };\n    }\n    return {} as AuthState;\n  });\n\n  const signIn = useCallback(async ({ email, password }) => {\n    const response = await api.post(\"sessions\", { email, password });\n\n    const { token, user } = response.data;\n    localStorage.setItem(\"@Posts:token\", token);\n    localStorage.setItem(\"@Posts:user\", JSON.stringify(user));\n\n    api.defaults.headers.authorization = `Bearer ${token}`;\n    setData({ token, user });\n  }, []);\n\n  const updateUser = useCallback(\n    (user: User) => {\n      localStorage.setItem(\"@Posts:user\", JSON.stringify(user));\n\n      setData({\n        token: data.token,\n        user,\n      });\n    },\n    [setData]\n  );\n\n  const signOut = useCallback(() => {\n    localStorage.removeItem(\"@Posts:token\");\n    localStorage.removeItem(\"@Posts:user\");\n    setData({} as AuthState);\n  }, []);\n\n  return (\n    <AuthContext.Provider\n      value={{ user: data.user, signIn, signOut, updateUser }}\n    >\n      {children}\n    </AuthContext.Provider>\n  );\n};\n\nexport function useAuth(): AuthContextData {\n  const context = useContext(AuthContext);\n  if (!context) throw new Error(\"useAuth must be used within an AuthProvider\");\n\n  return context;\n}\n"]},"metadata":{},"sourceType":"module"}